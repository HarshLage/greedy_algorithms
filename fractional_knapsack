//{ Driver Code Starts
#include <bits/stdc++.h>
using namespace std;

struct Item {
    int value;
    int weight;
};


// } Driver Code Ends
// class implemented
/*
struct Item{
    int value;
    int weight;
};
*/

class Solution {
  public:
    // Function to get the maximum total value in the knapsack.
    
    double fractionalKnapsack(int w, Item arr[], int n) {
        vector<double>Ratio;
        for(int i=0;i<n;i++){
           double val = (arr[i].value * 1.0) / arr[i].weight;
           Ratio.push_back(val);
            
        }
         priority_queue<pair<double,pair<double,double>>>maxi;
         for(int i =0;i<n;i++){
             maxi.push({Ratio[i],{arr[i].value,arr[i].weight}});
         }
         
         double totalV = 0;
         
         while (w !=0 && !maxi.empty()){
             
             auto front = maxi.top();
             maxi.pop();
             double ratio = front.first;
             double val = front.second.first;
             double wt = front.second.second;
             
             if(w >= wt ){
                 totalV += val;
                 w = w - wt;
             }
             else{
                 double valIn = ratio * w;
                 totalV += valIn;
                 w = 0;
                 break;
             }
             
             
         }
         return totalV;
    }
    
};


//{ Driver Code Starts.
int main() {
    int t;
    // taking testcases
    cin >> t;
    cout << setprecision(6) << fixed;
    while (t--) {
        // size of array and weight
        int n, W;
        cin >> n >> W;

        Item arr[n];
        // value and weight of each item
        for (int i = 0; i < n; i++) {
            cin >> arr[i].value >> arr[i].weight;
        }

        // function call
        Solution ob;
        cout << ob.fractionalKnapsack(W, arr, n) << endl;
    }
    return 0;
}
// } Driver Code Ends
